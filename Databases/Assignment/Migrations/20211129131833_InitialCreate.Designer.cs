// <auto-generated />
using System;
using Assignment;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211129131833_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Assignment.Models.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Venue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Assignment.Models.ActivityBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActivitySlotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PassengerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivitySlotId");

                    b.HasIndex("PassengerId");

                    b.ToTable("ActivityBookings");
                });

            modelBuilder.Entity("Assignment.Models.ActivitySlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivitySlots");
                });

            modelBuilder.Entity("Assignment.Models.CabinService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ServeBy")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CabinServices");
                });

            modelBuilder.Entity("Assignment.Models.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IntervalSeconds")
                        .HasColumnType("int");

                    b.Property<string>("Venue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Assignment.Models.ClassBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PassengerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("PassengerId");

                    b.ToTable("ClassBookings");
                });

            modelBuilder.Entity("Assignment.Models.DiningLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DiningLocations");
                });

            modelBuilder.Entity("Assignment.Models.Dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Allergens")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DiningLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsHalal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVegan")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DiningLocationId");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("Assignment.Models.DishOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CabinServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CabinServiceId");

                    b.HasIndex("DishId");

                    b.ToTable("DishOrders");
                });

            modelBuilder.Entity("Assignment.Models.Passenger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("Assignment.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PassengerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PassengerId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Assignment.Models.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DiningLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiningLocationId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("Assignment.Models.ActivityBooking", b =>
                {
                    b.HasOne("Assignment.Models.ActivitySlot", "ActivitySlot")
                        .WithMany("ActivityBookings")
                        .HasForeignKey("ActivitySlotId");

                    b.HasOne("Assignment.Models.Passenger", null)
                        .WithMany("ActivityBookings")
                        .HasForeignKey("PassengerId");

                    b.Navigation("ActivitySlot");
                });

            modelBuilder.Entity("Assignment.Models.ActivitySlot", b =>
                {
                    b.HasOne("Assignment.Models.Activity", "Activity")
                        .WithMany("ActivitySlots")
                        .HasForeignKey("ActivityId");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Assignment.Models.ClassBooking", b =>
                {
                    b.HasOne("Assignment.Models.Class", "Class")
                        .WithMany("ClassBookings")
                        .HasForeignKey("ClassId");

                    b.HasOne("Assignment.Models.Passenger", "Passenger")
                        .WithMany("ClassBookings")
                        .HasForeignKey("PassengerId");

                    b.Navigation("Class");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("Assignment.Models.Dish", b =>
                {
                    b.HasOne("Assignment.Models.DiningLocation", "DiningLocation")
                        .WithMany("Dishes")
                        .HasForeignKey("DiningLocationId");

                    b.Navigation("DiningLocation");
                });

            modelBuilder.Entity("Assignment.Models.DishOrder", b =>
                {
                    b.HasOne("Assignment.Models.CabinService", "CabinService")
                        .WithMany("DishOrders")
                        .HasForeignKey("CabinServiceId");

                    b.HasOne("Assignment.Models.Dish", "Dish")
                        .WithMany("DishOrders")
                        .HasForeignKey("DishId");

                    b.Navigation("CabinService");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("Assignment.Models.Reservation", b =>
                {
                    b.HasOne("Assignment.Models.Passenger", "Passenger")
                        .WithMany("Reservations")
                        .HasForeignKey("PassengerId");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("Assignment.Models.Table", b =>
                {
                    b.HasOne("Assignment.Models.DiningLocation", "DiningLocation")
                        .WithMany("Tables")
                        .HasForeignKey("DiningLocationId");

                    b.HasOne("Assignment.Models.Reservation", "Reservation")
                        .WithMany("Tables")
                        .HasForeignKey("ReservationId");

                    b.Navigation("DiningLocation");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Assignment.Models.Activity", b =>
                {
                    b.Navigation("ActivitySlots");
                });

            modelBuilder.Entity("Assignment.Models.ActivitySlot", b =>
                {
                    b.Navigation("ActivityBookings");
                });

            modelBuilder.Entity("Assignment.Models.CabinService", b =>
                {
                    b.Navigation("DishOrders");
                });

            modelBuilder.Entity("Assignment.Models.Class", b =>
                {
                    b.Navigation("ClassBookings");
                });

            modelBuilder.Entity("Assignment.Models.DiningLocation", b =>
                {
                    b.Navigation("Dishes");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("Assignment.Models.Dish", b =>
                {
                    b.Navigation("DishOrders");
                });

            modelBuilder.Entity("Assignment.Models.Passenger", b =>
                {
                    b.Navigation("ActivityBookings");

                    b.Navigation("ClassBookings");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Assignment.Models.Reservation", b =>
                {
                    b.Navigation("Tables");
                });
#pragma warning restore 612, 618
        }
    }
}
