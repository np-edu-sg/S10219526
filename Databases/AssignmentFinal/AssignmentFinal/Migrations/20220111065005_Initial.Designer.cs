// <auto-generated />
using System;
using AssignmentFinal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AssignmentFinal.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220111065005_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AssignmentFinal.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdultSalesPrice")
                        .HasColumnType("int");

                    b.Property<int>("ChildSalesPrice")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("BookDateTime");

                    b.Property<int>("EventSessionEventId")
                        .HasColumnType("int")
                        .HasColumnName("EventSessionEventID");

                    b.Property<int>("EventSessionSessionNo")
                        .HasColumnType("int")
                        .HasColumnName("EventSessionSessionNo");

                    b.Property<int>("NoOfAdultTicket")
                        .HasColumnType("int");

                    b.Property<int>("NoOfChildTicket")
                        .HasColumnType("int");

                    b.Property<int>("PassengerId")
                        .HasColumnType("int")
                        .HasColumnName("PassengerID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("BookStatus");

                    b.HasKey("Id");

                    b.HasIndex("PassengerId");

                    b.HasIndex("EventSessionSessionNo", "EventSessionEventId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("AssignmentFinal.Models.CategorisedIn", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("int")
                        .HasColumnName("DishID");

                    b.Property<int>("FoodCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("FoodCategoryID");

                    b.HasKey("DishId", "FoodCategoryId");

                    b.HasIndex("FoodCategoryId");

                    b.ToTable("CategorisedIn");
                });

            modelBuilder.Entity("AssignmentFinal.Models.Contain", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("int")
                        .HasColumnName("DishID");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("IngredientID");

                    b.HasKey("DishId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("Contains");
                });

            modelBuilder.Entity("AssignmentFinal.Models.CsDish", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("int")
                        .HasColumnName("DishID");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("DishId", "Price");

                    b.HasIndex("DishId")
                        .IsUnique();

                    b.ToTable("CsDish");
                });

            modelBuilder.Entity("AssignmentFinal.Models.Cuisine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CuisineID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CuisineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cuisine");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CuisineName = "Chinese"
                        });
                });

            modelBuilder.Entity("AssignmentFinal.Models.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DishID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CuisineId")
                        .HasColumnType("int")
                        .HasColumnName("CuisineID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DishDescr");

                    b.Property<int?>("EateryId")
                        .HasColumnType("int")
                        .HasColumnName("EatyID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DishName");

                    b.HasKey("Id");

                    b.HasIndex("CuisineId");

                    b.HasIndex("EateryId");

                    b.ToTable("Dish");
                });

            modelBuilder.Entity("AssignmentFinal.Models.Eatery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EatyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Capcacity")
                        .HasColumnType("int")
                        .HasColumnName("EatyCapacity");

                    b.Property<TimeSpan>("ClosingHours")
                        .HasColumnType("time")
                        .HasColumnName("EatyClHr");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EatyLoc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EatyName");

                    b.Property<TimeSpan>("OpeningHours")
                        .HasColumnType("time")
                        .HasColumnName("EatyOpHr");

                    b.HasKey("Id");

                    b.ToTable("Eatery");
                });

            modelBuilder.Entity("AssignmentFinal.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EventID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"), 1L, 1);

                    b.Property<int>("AdultPrice")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("EventCapacity");

                    b.Property<int>("ChildPrice")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EventDescr");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("EventDuration");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int")
                        .HasColumnName("EventTypeID");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EventLoc");

                    b.Property<int>("MaxAge")
                        .HasColumnType("int");

                    b.Property<int>("MinAge")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EventName");

                    b.HasKey("EventId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("AssignmentFinal.Models.EventSession", b =>
                {
                    b.Property<int>("SessionNo")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("EventID");

                    b.Property<DateTime>("EventDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("SessionNo", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventSession");
                });

            modelBuilder.Entity("AssignmentFinal.Models.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ETID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ETName");

                    b.HasKey("Id");

                    b.ToTable("EventType");
                });

            modelBuilder.Entity("AssignmentFinal.Models.FoodCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FcID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FcDescr");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FcName");

                    b.HasKey("Id");

                    b.ToTable("FoodCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Halal food for Muslims",
                            Name = "Halal"
                        });
                });

            modelBuilder.Entity("AssignmentFinal.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IngredID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IngredName");

                    b.HasKey("Id");

                    b.ToTable("Ingredient");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Chicken"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Rice"
                        });
                });

            modelBuilder.Entity("AssignmentFinal.Models.Order", b =>
                {
                    b.Property<int>("PassengerId")
                        .HasColumnType("int")
                        .HasColumnName("PgrID");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("OrderDateTime");

                    b.Property<int>("DishId")
                        .HasColumnType("int")
                        .HasColumnName("DishID");

                    b.Property<DateTime>("DelDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliverTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("OrderPrice");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("OrderQty");

                    b.HasKey("PassengerId", "DateTime", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("AssignmentFinal.Models.Passenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PgrID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DOB")
                        .HasColumnType("date")
                        .HasColumnName("PgrDOB");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PgrEmail");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("PgrGender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PgrName");

                    b.HasKey("Id");

                    b.ToTable("Passenger");

                    b.HasCheckConstraint("CK_Passenger_Gender", "[PgrGender] IN ('M', 'F')");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DOB = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob@gmail.com",
                            Gender = "M",
                            Name = "Bob"
                        });
                });

            modelBuilder.Entity("AssignmentFinal.Models.PassengerContactNo", b =>
                {
                    b.Property<int>("PassengerId")
                        .HasColumnType("int")
                        .HasColumnName("PassengerID");

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PassengerId", "ContactNo");

                    b.HasIndex("PassengerId")
                        .IsUnique();

                    b.ToTable("PassengerContactNo");
                });

            modelBuilder.Entity("AssignmentFinal.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReservID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EateryId")
                        .HasColumnType("int")
                        .HasColumnName("EateryID");

                    b.Property<short>("NoOfPax")
                        .HasColumnType("smallint");

                    b.Property<int>("PassengerId")
                        .HasColumnType("int")
                        .HasColumnName("PassengerID");

                    b.Property<DateTime>("RequiredDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ReservStatus");

                    b.HasKey("Id");

                    b.HasIndex("EateryId");

                    b.HasIndex("PassengerId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("AssignmentFinal.Models.Booking", b =>
                {
                    b.HasOne("AssignmentFinal.Models.Passenger", null)
                        .WithMany("Bookings")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssignmentFinal.Models.EventSession", null)
                        .WithMany("Bookings")
                        .HasForeignKey("EventSessionSessionNo", "EventSessionEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssignmentFinal.Models.CategorisedIn", b =>
                {
                    b.HasOne("AssignmentFinal.Models.Dish", null)
                        .WithMany("CategorisedIn")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssignmentFinal.Models.FoodCategory", null)
                        .WithMany("CategorisedIn")
                        .HasForeignKey("FoodCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssignmentFinal.Models.Contain", b =>
                {
                    b.HasOne("AssignmentFinal.Models.Dish", null)
                        .WithMany("Contains")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssignmentFinal.Models.Ingredient", null)
                        .WithMany("Contains")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssignmentFinal.Models.CsDish", b =>
                {
                    b.HasOne("AssignmentFinal.Models.Dish", null)
                        .WithOne("CsDish")
                        .HasForeignKey("AssignmentFinal.Models.CsDish", "DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssignmentFinal.Models.Dish", b =>
                {
                    b.HasOne("AssignmentFinal.Models.Cuisine", null)
                        .WithMany("Dishes")
                        .HasForeignKey("CuisineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssignmentFinal.Models.Eatery", null)
                        .WithMany("Dishes")
                        .HasForeignKey("EateryId");
                });

            modelBuilder.Entity("AssignmentFinal.Models.Event", b =>
                {
                    b.HasOne("AssignmentFinal.Models.EventType", null)
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssignmentFinal.Models.EventSession", b =>
                {
                    b.HasOne("AssignmentFinal.Models.Event", null)
                        .WithMany("EventSessions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssignmentFinal.Models.Order", b =>
                {
                    b.HasOne("AssignmentFinal.Models.Dish", null)
                        .WithMany("Orders")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssignmentFinal.Models.Passenger", null)
                        .WithMany("Orders")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssignmentFinal.Models.PassengerContactNo", b =>
                {
                    b.HasOne("AssignmentFinal.Models.Passenger", null)
                        .WithOne("PassengerContactNo")
                        .HasForeignKey("AssignmentFinal.Models.PassengerContactNo", "PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssignmentFinal.Models.Reservation", b =>
                {
                    b.HasOne("AssignmentFinal.Models.Eatery", null)
                        .WithMany("Reservations")
                        .HasForeignKey("EateryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssignmentFinal.Models.Passenger", null)
                        .WithMany("Reservations")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssignmentFinal.Models.Cuisine", b =>
                {
                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("AssignmentFinal.Models.Dish", b =>
                {
                    b.Navigation("CategorisedIn");

                    b.Navigation("Contains");

                    b.Navigation("CsDish")
                        .IsRequired();

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("AssignmentFinal.Models.Eatery", b =>
                {
                    b.Navigation("Dishes");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("AssignmentFinal.Models.Event", b =>
                {
                    b.Navigation("EventSessions");
                });

            modelBuilder.Entity("AssignmentFinal.Models.EventSession", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("AssignmentFinal.Models.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("AssignmentFinal.Models.FoodCategory", b =>
                {
                    b.Navigation("CategorisedIn");
                });

            modelBuilder.Entity("AssignmentFinal.Models.Ingredient", b =>
                {
                    b.Navigation("Contains");
                });

            modelBuilder.Entity("AssignmentFinal.Models.Passenger", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Orders");

                    b.Navigation("PassengerContactNo")
                        .IsRequired();

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
